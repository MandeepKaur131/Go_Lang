Why Go
    Light-Weight
    Fast
        Execution Speed: Js, Pyhton, Ruby, PHP (Interpeted languages)
        Compilation Speed: Rust, C, C++, Java, C#
        Java and C# runs on VM
        GO's speed in kind of same to Java and C#
        A piece code is included in evey GO program for memory which slows the speed a lil
    Go is compiled language


Code Saples - https://boot.dev and git-hub repo


Compilation: We write code in human readable format. Computer can't understand the what
humans can! Hence, CPU needs it's 1 and 0 and that's all what compilation is! The conversation
of human readable code into byte is compilation.

The program or interface which does this program is called a compiler. Programming langs like
Java and C# have their own compilers.

Interpreter:
Distributor: we gave the raw file..then the person can run Python file_name.py
The demerits:
    The person needs to have the python installed
    People can have access your code and a-ha it's open hourse now
Compilation
Disttibution: We share the compiled file - an executeable file - much easier

GO is strongly and static typed Language.

Fast = Speed and memory
Rust / C - Memory is Mannual!
Java - Garbage Collectiona and automated
It's like creating a mini JVM and run the code their
Java uses more memory

Go has automated memory management but no VM. Go code has a little more code which make memory
management efficient...yeah more code
The purpose of the GO runtime is to cleanup unused memory
%T is for printing the Type

Standard sizes that should be used unless the developer has a specfic need are:
 - int
 - unit
 - float64
 - complex128

Bit - 8 Bytes
Nibbles - 4 Bytes
Bytes - a 0 or a 1

Interfaces in go are collection of method signatures. A
type "implements" an interface if it has all of the methods
of the given interace defined on it.


Omitting the Condition in For Loop (Infinite looping)
Syntax - for INITIAL ; ; AFTER { // do something}

While Loop?
for Condition (this is how we make our while loop in GO)
e.g.
plantHeight := 1
for plantHeight < 5 {
    fmt.Println("Still growing! current height:", plantHeight)
    plantHeight++
}
fmt.Println("plant has to grown to ", plantHeight, "inches.")

# Slice! - [] int
the size is missing. The slice is dynamically flexible, built on top
of arrays! Slice provide much better exp.
# For Loop - With the omission of condition and past condition
package main

import "fmt"

func main() {
	sum := 1
	for ; sum < 1000; {
		sum += sum
	}
	fmt.Println(sum)
}

# Switch
Go's switch is like the one in C, C++, Java, JavaScript, and PHP,
except that Go only runs the selected case, not all the cases that follow.
In effect, the break statement that is needed at the end of each case in
those languages is provided automatically in Go. Another important
difference is that Go's switch cases need not be constants, and the
values involved need not be integers.

# Slices can be appened to dynamically add elements
the valid egs
    slice = append(slice, oneThing)
    slice = append(slice, firstThing, secondThing)
    slice = append(slice, anotherSlice...)

# For - Range loop
 for INDEX, ELEMENT := range SLICE {}
 eg
    fruits := [] string {"apple", "banana", "grape"}
    for i, fruit := range fruits {
        fmt.Println(i, fruit)
    }

# Currying
    The practice of writing a function that takes a function(s) as input
    and returns a new function